#!/usr/bin/env python
"""Converts images to the different formats used in wrdk"""

import sys
import optparse
import StringIO
import copy
import re

import wrdk

import PIL.Image

# Pull in a few of the standard loaders so that py2exe can find them
import PIL.BmpImagePlugin
import PIL.PngImagePlugin
import PIL.XpmImagePlugin

header_header = """/* Generated from %(arg)s by %(this)s */

"""

header_body = """enum
{
    %(variable)s_width = %(width)d,
    %(variable)s_height = %(height)d,
};

%(type)s %(variable)s =
{
    .width = %(width)d,
    .height = %(height)d,
"""

def fix_xpm(name):
    # PIL has quite a few problems with XPM files.  mmap() makes the
    # image all jagged.  Comments turn into bad rows.  Create a tidied
    # up version before writing it.

    clean = ['/* XPM */']

    for line in open(name).readlines():
        # Strip out any comments
        line = re.sub(r'/\*.*\*/', '', line)
        line = line.strip()

        # Only append if there's anything left
        if line:
            clean.append(line)

    io = StringIO.StringIO('\n'.join(clean))

    img = PIL.Image.open(io)

    return img

def main():
    parser = optparse.OptionParser(version=wrdk.__version__)

    parser.add_option('-o', dest='output')
    parser.add_option('-f', dest='format', type='choice', choices=['ico', 'header'], default='ico')
    parser.add_option('--with-mask', action='store_true', dest='with_mask', default=False)
    parser.add_option('--auto-mask', action='store_true',
                      dest='auto_mask', default=False)

    parser.add_option('--variable-name', dest='variable', default='image')
    parser.add_option('--type-name', dest='type', default='LCD_ImageType')

    options, args = parser.parse_args()

    if not args:
        parser.error('no filename supplied')

    if len(args) > 1:
        parser.error('too many filenames')

    # Load the image
    img = PIL.Image.open(args[0])

    if img.format == 'XPM':
        img = fix_xpm(args[0])

    width, height = img.size

    # Convert to greyscale to make the processing easier
    luma = list(img.convert('L').getdata())

    # Split the luma into rows
    rows = [luma[i:i+width] for i in range(0, len(luma), width)]
    # Build the binary mask for each pixel in the row
    masks = [2**(7 - i % 8) for i in range(width)]

    def threshold(x):
        return 1 if x == 0 else 0

    def mask(x):
        return 1 if (x != 0 and x != 255) else 0

    def extract(mapper):
        out = []

        for row in rows:
            bits = [mapper(x) for x in row]
            masked = [x*y for x, y in zip(masks, bits)]
            bytes = [sum(masked[x:x+8]) for x in range(0, len(masked), 8)]

            out.append(bytes)

        return out

    byte_rows = extract(threshold)
    mask_rows = extract(mask)

    fill = 0 if width % 8 == 0 else 2**(8 - width%8) - 1

    with_mask = options.with_mask

    for row in mask_rows:
        if options.auto_mask and sum(row) != 0:
            with_mask = True
            
        row[-1] |= fill

    if options.output:
        out = open(options.output, 'wb')
    else:
        out = sys.stdout

    d = copy.copy(options.__dict__)
    d.update(locals())
    d['arg'] = args[0]
    d['this'] = sys.argv[0]

    def write_ico():
        for row in byte_rows:
            out.write(''.join(chr(x) for x in row))

    def write_header():
        out.write(header_header % d)

        if with_mask:
            print >> out, 'static const uint8_t %(variable)s_mask[] =\n{' % d

            for y, row in enumerate(mask_rows):
                print >> out, '        /* Row %d */' % y
                print >> out, '        %s,' % ', '.join('0x%02x' % x for x in row)

            print >> out, '};'

        out.write(header_body % d)

        if with_mask:
            print >> out, '    .mask = %(variable)s_mask,' % d

        print >> out, '    .bytes =\n    {'

        for y, row in enumerate(byte_rows):
            print >> out, '        /* Row %d */' % y
            print >> out, '        %s,' % ', '.join('0x%02x' % x for x in row)

        print >> out, '    }\n};'

    outputter = 'write_' + options.format

    locals()[outputter]()

if __name__ == '__main__':
    main()
