GAS LISTING fixdfui.s 			page 1


   1              	;*********************************************
   2              	;*	Copyright (C), 1996-2001 SEIKO EPSON Corp.
   3              	;*		ALL RIGHTS RESERVED
   4              	;*
   5              	;*	filename : fixdfui.s
   6              	;*
   7              	;*	Change type: Double float --> Unsigned integer
   8              	;*							  --> Signed integer
   9              	;*		input: (%r7, %r6)
  10              	;*		output: %r4
  11              	;*
  12              	;*	Begin		1996/09/12	V. Chan
  13              	;*  変更		2001/01/17  O.Hinokuchi
  14              	;*  			 ・レジスタ置き換え
  15              	;*				 ・__fixdfsi ファイル分割のため削除 
  16              	;*				 ・マイナスの値のキャストは ０  オーバーフローする時は、
  17              	;*                0xffffffffを返すように修正。(gccの処理と同一)
  18              	;*	gas対応		2001/10/15	watanabe
  19              	;*
  20              	;*****************************************
  21              	
  22              	.section .text
  23              	.align 1
  24              	.global __fixunsdfsi
  25              	
  26              	;==============================================
  27              	;＜レジスタ説明＞
  28              	;	%r0:符号ビット(0(+) or 1(-))
  29              	;	%r4:戻り値(int or uint)
  30              	;	%r5:指数部(11bit)
  31              	;	%r6:引数２(Double下位32bit)
  32              	;	%r7:引数１(Double上位32bit)
  33              	;	%r8:mask
  34              	;	%r9:shift
  35              	;==============================================
  36              	
  37              	__fixunsdfsi:
  38              	
  39 0000 742E     		ld.w	%r4, %r7
  40 0002 00D000C0 		xand	%r4, 0x80000000		; if( sign_bit == 0 )
  40      0470
  41              	
  42 0008 00C000C0 		xjreq	start						;    goto __fixdfsi
  42      0318
  43              											; else
  44 000e 046C     		xld.w	%r4, 0x0					;	return(0)
  45 0010 4006     		ret
  46              	start:
  47              	
  48 0012 0002     		pushn	%r0				; %r0 待避
  49              	
  50 0014 702E     		ld.w	%r0, %r7		; 符号ビット(%r0) <- 引数２(%r7) put sign of input (%r7) into %r0
  51 0016 109C     		rl		%r0, 1			; 符号ビット(%r0) >> 31 と同じ
  52 0018 1070     		and		%r0, 1			; 符号ビット(%r0) = 符号ビット(%r0) & 1 moved to line 33
  53              	
  54 001a 752E     		ld.w	%r5, %r7		; 指数部(%r5) <- 引数１(%r7)  put exponent into %r5
  55 001c 158C     		sll		%r5, 1			; 指数部(%r7) << 1
GAS LISTING fixdfui.s 			page 2


  56 001e 85888588 		xsrl 	%r5, 21			; 指数部(%r7) >> 24	
  56      5588
  57              	
  58 0024 0FC0F56B 		xcmp	%r5, 0x3ff		; if 指数部(%r7) < 0x3ff then goto end
  59 0028 330D     		jrlt.d	end				; case: round to zero (underflow)
  60 002a 046C     		ld.w	%r4, 0			; 戻り値(%r4) <- 0 clear output register
  61              	
  62 002c 10C0F569 		xcmp	%r5, 0x41f		; if 戻り値(%r4) >= 0x41f then integer overflow
  63 0030 146C     		ld.w	%r4, 1			; 戻り値(%r4) <- 1
  64 0032 2A0B     		jrge.d	overflow
  65 0034 1498     		rr		%r4, 1			; 戻り値(%r4) = 0x8000 0000
  66              	
  67              		; isolate mantissa
  68 0036 742E     		ld.w	%r4, %r7		; 戻り値(%r4) <- 引数１(%r7) 
  69 0038 01C0FFDF 		xand	%r4, 0xfffff	; 戻り値(%r4) <- 戻り値(%r4) & 0xfffff) clear first 12 bits of %r7
  69      F473
  70 003e 02C000C0 		xoor	%r4, 0x100000	; 戻り値(%r4) <- (戻り値(%r4) | 0x100000) add implied bit
  70      0474
  71 0044 10C0396D 		xld.w	%r9, 0x413		;shift(%r9) <- 0x413
  72              	
  73 0048 952A     		cmp		%r5, %r9		; 0x3ff + 31 - 11 = 0x413
  74 004a 0908     		jrgt	shftleft		; if 指数部(%r7) > 0x413 then shift left
  75              	
  76              		; case: exp <= 0x413
  77 004c 5926     		sub		%r9, %r5		; %r9 = 0x413 - exp (max = 20)
  78              	
  79              		;xsrl		%r4, %r3		; final shift of result
  80              		; 32-bit variable shift routine
  81              	L1:
  82 004e 8968     		cmp		%r9, 8			; if shift(%r9)  <= 8 then goto L2
  83 0050 040E     		jrle	L2
  84              	
  85 0052 8488     		srl		%r4, 8			; 戻り値(%r4) >> 8
  86 0054 FD1F     		jp.d	L1
  87 0056 8964     		sub		%r9, 8			; shift(%r9)  = shift(%r9)  - 8
  88              	
  89              	L2:
  90 0058 121F     		jp.d	finish
  91 005a 9489     		srl		%r4, %r9		; 戻り値(%r4) >> shift(%r9) last shift
  92              	
  93              	shftleft:
  94 005c 9526     		sub		%r5, %r9		; 指数部(%r5) = 指数部(%r5) - shift(%r9=0x413) (max = 11)
  95              		
  96              		; {result, man1_2} << 0x413-exp
  97              		;xsll	%r4, %r1		; shift high 32-bits to the left x bits (shift amount = x)
  98              		;xrl	%r6, %r1		; rotate low 32-bits to the left x bits
  99              		;xsll	%r2, %r1		; make a mask for first 32-x bits --> %r2 = 111...000
 100              	
 101 005e F86F     		ld.w	%r8, -1			; mask(%r8) = 0xffff ffff
 102              		; 64-bit variable shift and rotate routine
 103              	L3:
 104 0060 8568     		cmp		%r5, 8			; if 指数部(%r5) <= 8 then goto L2
 105 0062 060E     		jrle	L4
 106              	
 107 0064 848C     		sll		%r4, 8			; 戻り値(%r4) << 8
 108 0066 869C     		rl		%r6, 8			; 引数２(%r6) rotate << 8
 109 0068 888C     		sll		%r8, 8			; mask(%r8) << 8
GAS LISTING fixdfui.s 			page 3


 110 006a FB1F     		jp.d	L3
 111 006c 8564     		sub		%r5, 8			; 指数部(%r5) = 指数部(%r5) - 8 
 112              	
 113              	L4:
 114 006e 548D     		sll		%r4, %r5		; 戻り値(%r4) << 指数部(%r5)
 115 0070 569D     		rl		%r6, %r5		; 引数２(%r6) rotate << 指数部(%r5)
 116 0072 588D     		sll		%r8, %r5		; mask(%r8) << 指数部(%r5)
 117              	
 118 0074 853E     		not		%r5, %r8		; 指数部(%r5) = ~mask(%r8) flip mask for last x bits --> %r9 = 000...111 (mask)
 119 0076 6532     		and		%r5, %r6		; 指数部(%r5) = 指数部(%r5) & 引数２(%r6) isolate last x bits of %r6
 120 0078 5436     		or		%r4, %r5		; 戻り値(%r4) = 戻り値(%r4) & 指数部(%r5) add last x bits of %r6 to %r4
 121 007a 8632     		and		%r6, %r8		; 引数(%r6) = 引数２(%r6) & mask(%r8) keep the high 32-x bits of %r6
 122              	
 123              	finish:
 124 007c 0068     		cmp		%r0, 0			; if 符号ビット(%r0) = 0 then goto end
 125 007e 0818     		jreq	end
 126              		
 127              		; case: sign = 1
 128 0080 443E     		not		%r4, %r4		; 戻り値(%r4) = ~戻り値(%r4)
 129 0082 061F     		jp.d	end
 130 0084 1460     		add		%r4, 1			; 戻り値(%r4) = 戻り値(%r4) + 1 (２の補数)
 131              	
 132              	overflow:
 133 0086 0068     		cmp		%r0, 0			; check sign
 134 0088 031A     		jrne	end				; if 符号ビット(%r0) = 1 then goto end
 135 008a 046C     		ld.w	%r4, 0			; オーバーフローする時は、0xffffffffを返すように修正。01/01/17  Hinokuchi 
 136 008c 443E     		not		%r4, %r4		; 符号ビット(%r0) <- 0xffffffff
 137              	
 138              	end:
 139 008e 4002     		popn	%r0				; %r0 復帰
 140 0090 4006     		ret
