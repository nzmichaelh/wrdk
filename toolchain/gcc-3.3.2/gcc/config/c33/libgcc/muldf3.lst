GAS LISTING muldf3.s 			page 1


   1              	;*********************************************
   2              	;*	Copyright (C), 1996-2001 SEIKO EPSON Corp.
   3              	;*		ALL RIGHTS RESERVED
   4              	;*
   5              	;*	filename : muldf3.s
   6              	;*
   7              	;*	Double floating point multiplication function
   8              	;*		input: (%r7, %r6) & (%r9, %r8)
   9              	;*		output: (%r5, %r4)
  10              	;*
  11              	;*	Begin						1996/09/12	V. Chan
  12              	;*	Fixed bug at multiply:		1997/02/18	V. Chan
  13              	;*  ÊÑ¹¹						2001/01/30  O.Hinokuchi
  14              	;*	gasÂÐ±þ		2001/10/15	watanabe
  15              	;*
  16              	;*****************************************
  17              	
  18              	.section .text
  19              	.align 1
  20              	.global __muldf3
  21              	
  22              	;;macro	SHFTROTSHFT $1, $2, $3, $4, $5, $6, $7
  23              		; used in 64-bit variable shifting
  24              		; $1 = shift amount
  25              		; $2 = 1st input register (shifted)
  26              		; $3 = 2nd input register (rotated)
  27              		; $4 = 3rd input register (mask --> shifted)
  28              		; $5 = shift instruction
  29              		; $6 = rotate instruction
  30              		; $7 = temp register
  31              	;	ld.w	$7, $1		; temp = shift amount
  32              	
  33              	;$$1:
  34              	;	cmp		$7, 8		; if temp <= 8 then goto $$2
  35              	;	jrle	$$2
  36              	
  37              	;	$5		$2, 8		; shift 1st register
  38              	;	$6		$3, 8		; rotate 2nd register
  39              	;	$5		$4, 8		; shift 3rd register
  40              	;	jp.d	$$1
  41              	;	sub		$7, 8		; temp = temp - 8
  42              	
  43              	;$$2:
  44              	;	$5		$2, $7		; last shift
  45              	;	$6		$3, $7		; last rotate
  46              	;	$5		$4, $7		; last shift
  47              	;;endm
  48              	
  49              	__muldf3:
  50 0000 0302     		pushn	%r3				; save register values
  51              		;@@@ 01/01/30 add start hinokuchi
  52              		;sub		%sp, 4
  53              		;ld.w	[%sp+0], %r10	; %r10ÂÔÈò
  54              		;ld.w	[%sp+1], %r11	; %r11ÂÔÈò
  55              		;ld.w	[%sp+2], %r12	; %r12ÂÔÈò
  56              		;ld.w	[%sp+3], %r13	; %r13ÂÔÈò
  57              		;@@@ 01/01/30 add end
GAS LISTING muldf3.s 			page 2


  58              	
  59 0002 702E     		ld.w	%r0, %r7		; put sign of input1 (%r7) into %r0
  60 0004 109C     		rl		%r0, 1
  61 0006 1070     		and		%r0, 1
  62              	
  63 0008 922E     		ld.w	%r2, %r9		; put sign of input2 (%r9) into %r2
  64 000a 129C     		rl		%r2, 1
  65 000c 1270     		and		%r2, 1
  66              	
  67 000e 203A     		xor		%r0, %r2		; put new sign into register %r0
  68              	
  69 0010 056C     		ld.w	%r5, 0			; clear output register
  70              		;ld.w	%r4, 0			; moved to line 38 for a delayed jump
  71              		
  72 0012 178C     		sll		%r7, 1			; clear MSB
  73 0014 1788     		srl		%r7, 1
  74 0016 0768     		cmp		%r7, 0			; checking if input1 = 0
  75 0018 051B     		jrne.d	input2
  76 001a 046C     		ld.w	%r4, 0
  77 001c 0668     		cmp		%r6, 0			
  78 001e 00C0     		ext		end@rm
  79 0020 E018     		jreq	end@rl			; if {%r7, %r6} = 0 then end
  80              	
  81              	input2:
  82 0022 198C     		sll		%r9, 1			; clear MSB
  83 0024 1988     		srl		%r9, 1	
  84 0026 0968     		cmp		%r9, 0			; checking if input2 = 0
  85 0028 041A     		jrne	getexp
  86 002a 0868     		cmp		%r8, 0
  87 002c 00C0     		ext		end@rm
  88 002e D918     		jreq	end@rl				; if {%r9, %r8} = 0 then end
  89              	
  90              	getexp:
  91 0030 712E     		ld.w	%r1, %r7		; put exponent1 into %r1
  92 0032 81888188 		xsrl 	%r1, 20
  92      4188
  93              	
  94 0038 1FC0F16B 		xcmp	%r1, 0x7ff		; check exp1 for overflow value
  95 003c 00C0     		ext		overflow@rm
  96 003e C618     		jreq	overflow@rl
  97              	
  98 0040 932E     		ld.w	%r3, %r9		; put exponent2 into %r3
  99 0042 83888388 		xsrl	%r3, 20
  99      4388
 100              	
 101 0048 1FC0F36B 		xcmp	%r3, 0x7ff		; check exp2 for overflow value
 102 004c 00C0     		ext		overflow@rm
 103 004e BE18     		jreq	overflow@rl
 104              	
 105              		; free	%r2, %r11 - %r13
 106              		; %r0 = sign, %r1 = sisu1, %r3 = sisu2
 107              		; %r10 = implied bit
 108              	
 109              		;@@@ 01/02/16 del xld.w	%r10, 0x100000	; implied bit
 110 0050 126C     		ld.w	%r2, 1			; temp = 1
 111              		;@@@ 01/02/16 del xld.w	%r13, 0xfffff
 112              	
GAS LISTING muldf3.s 			page 3


 113              		; isolate mantissa1
 114 0052 01C0FFDF 		xand	%r7, 0xfffff	; clear first 12 bits of %r6
 114      F773
 115 0058 0168     		cmp		%r1, 0
 116 005a 0518     		jreq	man2			; if exp1 = 0 (denormal)
 117 005c 02C000C0 		xoor	%r7, 0x100000	; else add implied bit to mantissa
 117      0774
 118              	
 119 0062 026C     		ld.w	%r2, 0			; temp = 0
 120              	
 121              	man2:
 122              		; isolate mantissa2
 123 0064 01C0FFDF 		xand	%r9, 0xfffff	; clear first 12 bits of %r7
 123      F973
 124              	
 125 006a 0368     		cmp		%r3, 0
 126 006c 0518     		jreq	tempadd			; if exp2 = 0 then jump to tempadd
 127 006e 02C000C0 		xoor	%r9, 0x100000	; else add implied bit
 127      0974
 128 0074 021E     		jp	multiply			; delayed jump
 129              	
 130              	tempadd:
 131 0076 1260     		add		%r2, 1			; temp = temp + 1 (2 if den * den : 1 if nor * den)
 132              		
 133              	multiply:
 134              		; %r0 = result sign, %r1 = result exponent
 135              	
 136              		; calculate and check new exponent
 137 0078 3122     		add		%r1, %r3		; sisu = sisu1 + sisu2 - bias + temp
 138              	
 139 007a 0FC0F167 		xsub	%r1, 0x3ff
 140              	
 141 007e 2122     		add		%r1, %r2
 142              	
 143 0080 1FC0F16B 		xcmp	%r1, 0x7ff		; if exp >= 0x7ff then goto overflow
 144 0084 00C0     		ext		overflow@rm
 145 0086 A20A     		jrge	overflow@rl
 146              	
 147              		; max. shift from normal to denormal = 52
 148              		; min. exp = 1 - max. shift = -51
 149 0088 FFDFD168 		xcmp	%r1, -51		; if exp < -51 then goto underflow
 150 008c 6C0C     		jrlt	underflow
 151              	
 152              		; 64-bit * 64-bit = 128-bit
 153              		; 1st(128 ~ 97), 2nd(96 ~ 65), 3rd(64 ~ 33), 4th(32 ~ 0)
 154              		; (%r7,%r6) * (%r9,%r8)
 155              		; %r7 * a15 --> 1st,2nd
 156              		; %r7 * a14 --> 2nd,3rd
 157              		; %r6 * a15 --> 2nd,3rd
 158              		; %r6 * a14 --> 3rd,4th
 159              		; %r5 = result1, %r4 = result2, %r10 = result3, %r11 = result4, %r12 = temp
 160 008e 026C     		ld.w	%r2, 0			; temp variable for adc and loop counter
 161 0090 97AE     		mltu.w	%r7, %r9		; kasu1 * kasu2
 162 0092 35A4     		ld.w	%r5, %ahr		; %r5 = result1	
 163 0094 24A4     		ld.w	%r4, %alr		; %r4 = result2
 164 0096 87AE     		mltu.w	%r7, %r8		; kasu1 * kasu2_2
 165 0098 37A4     		ld.w	%r7, %ahr
GAS LISTING muldf3.s 			page 4


 166 009a 7422     		add		%r4, %r7
 167 009c 25B8     		adc		%r5, %r2		; add carry
 168 009e 23A4     		ld.w	%r3, %alr		; %r10 = result3
 169 00a0 96AE     		mltu.w	%r6, %r9		; kasu1_2 * kasu2
 170 00a2 27A4     		ld.w	%r7, %alr
 171 00a4 7322     		add		%r3, %r7
 172 00a6 24B8     		adc		%r4, %r2		; add carry
 173 00a8 25B8     		adc		%r5, %r2		; add carry
 174 00aa 37A4     		ld.w	%r7, %ahr
 175 00ac 7422     		add		%r4, %r7
 176 00ae 25B8     		adc		%r5, %r2		; add carry
 177 00b0 86AE     		mltu.w	%r6, %r8		; kasu1_2 * kasu2_2
 178 00b2 37A4     		ld.w	%r7, %ahr
 179 00b4 7322     		add		%r3, %r7
 180 00b6 24B8     		adc		%r4, %r2		; add carry
 181 00b8 25B8     		adc		%r5, %r2
 182 00ba 26A4     		ld.w	%r6, %alr		; %r11 = result4
 183              		
 184              		; %r8 will be first result register > 0
 185 00bc 0568     		cmp		%r5, 0			; if %r5 !=0 then count it
 186 00be 0F1B     		jrne.d	count
 187 00c0 582E     		ld.w	%r8, %r5
 188              	
 189 00c2 00C0026E 		xld.w	%r2, 32			; %r2 = loop counter = 32 
 190 00c6 0468     		cmp		%r4, 0			; elsif %r4 != 0 then count it
 191 00c8 0A1B     		jrne.d	count
 192 00ca 482E     		ld.w	%r8, %r4
 193              	
 194 00cc 01C0026C 		xld.w	%r2, 64			; %r2 = loop counter = 64
 195 00d0 0368     		cmp		%r3, 0			; elsif %r10 != 0 then count it
 196 00d2 051B     		jrne.d	count
 197 00d4 382E     		ld.w	%r8, %r3
 198              	
 199 00d6 01C0026E 		xld.w	%r2, 96			; %r2 = loop counter = 96
 200 00da 682E     		ld.w	%r8, %r6		; else count 0's leading %r6
 201              		
 202              	count:
 203 00dc 878E     		scan1	%r7, %r8		; %r7 = count
 204 00de 0412     		jruge	normalize		; if count !=8 then goto normalize
 205 00e0 8260     		add		%r2, 8			; add 8 to loop counter
 206 00e2 FD1F     		jp.d	count
 207 00e4 888C     		sll		%r8, 8			; shift register to the left 8 bits
 208              	
 209              	normalize:
 210              		; free	%r2 - %r11, %r13
 211              		; %r0 = sign, %r1 = exp, %r7 = count
 212              		; note: max. count = 127, min. count = 22
 213              	
 214 00e6 2722     		add		%r7, %r2		; count = count + loopcounter
 215              	
 216 00e8 0168     		cmp		%r1, 0			; if exp > 0 then jump to expgtz
 217 00ea 0F09     		jrgt.d	expgtz
 218 00ec 7765     		sub		%r7, 23			; count = count - 23
 219              	
 220              		; case: exp <= 0
 221 00ee 0184     	sub %sp, 1
 222 00f0 035C     	ld.w	[%sp+0x0], %r3	; %r3ÂÔÈò
GAS LISTING muldf3.s 			page 5


 223 00f2 136C     		ld.w	%r3, 1			; %r3 = 1 - exp
 224 00f4 1326     		sub		%r3, %r1
 225 00f6 C26C     		ld.w	%r2, 12			; %r2 = shift
 226 00f8 3226     		sub		%r2, %r3		; shift = 12 - (1 - exp)
 227 00fa 0350     	ld.w	%r3, [%sp+0x0]	; %r3Éüµ¢
 228 00fc 0180     	add %sp, 1
 229 00fe 712A     		cmp		%r1, %r7
 230 0100 0D0F     		jrle.d	shift			; if exp <= count then jump to shift
 231 0102 016C     		ld.w	%r1, 0			; exp = 0
 232              	
 233              		; case: exp > count - 23
 234 0104 0B1F     		jp.d	shift			; delayed jump
 235 0106 116C     		ld.w	%r1, 1			; exp = 1
 236              		
 237              	expgtz:
 238 0108 172A     		cmp		%r7, %r1		; if count < exp then goto shftltexp
 239 010a 060D     		jrlt.d	shftltexp
 240 010c C26C     		ld.w	%r2, 12			; shift = 12
 241              	
 242              		; case: original count - 23 >= exp
 243 010e 1222     		add		%r2, %r1		; shift = shift + exp - 1
 244 0110 1264     		sub		%r2, 1			; shift as much as exp allows (until denormal)
 245 0112 041F     		jp.d	shift
 246 0114 016C     		ld.w	%r1, 0			; exp = 0
 247              		
 248              	shftltexp:
 249 0116 7126     		sub		%r1, %r7		; exp = exp - count
 250 0118 7222     		add		%r2, %r7		; shift = shift + count
 251              	
 252              	shift:
 253 011a 0268     		cmp		%r2, 0			;if shift < 0 then shift to the right
 254 011c 120C     		jrlt	rshift
 255              	
 256 011e 00C0026A 		xcmp	%r2, 32			; if 0 =< shift < 32 then goto lshift
 257 0122 350C     		jrlt	lshift
 258              	
 259 0124 01C00268 		xcmp	%r2, 64			; if 32 =< shift < 64 then goto shft32
 260 0128 070C     		jrlt	lshft32
 261              	
 262              		; case:	shift >= 64		(note: max. shift of norm * denormal = 87)
 263 012a 352E     		ld.w	%r5, %r3		; result1 = result3
 264 012c 642E     		ld.w	%r4, %r6		; result2 = result4
 265              	
 266 012e 01C00264 		xsub	%r2, 64	; shift = shift - 64
 267              	
 268 0132 2D1F     		jp.d	lshift
 269 0134 036C     		ld.w	%r3, 0			; result3 = 0
 270              	
 271              	lshft32:
 272 0136 452E     		ld.w	%r5, %r4		; result1 = result2
 273 0138 342E     		ld.w	%r4, %r3		; result2 = result3
 274 013a 632E     		ld.w	%r3, %r6		; result3 = result4
 275 013c 281F     		jp.d	lshift
 276 013e 0266     		sub		%r2, 32			; shift = shift - 32
 277              	
 278              	rshift:
 279              		; case: shift < 0
GAS LISTING muldf3.s 			page 6


 280 0140 223E     		not		%r2, %r2		; shift = ~shift + 1
 281 0142 1260     		add		%r2, 1
 282              	
 283 0144 00C0926A 		xcmp	%r2, 41			; if shift > 41 (64-min.count-1) then
 284 0148 0E08     		jrgt	underflow
 285              	
 286 014a 00C0026A 		xcmp	%r2, 32			; if shift < 32 then shift right
 287 014e 0E0C     		jrlt	doshift
 288              	
 289              		; case: 40 => shift >= 32
 290 0150 542E     		ld.w	%r4, %r5		; result2 = result1
 291 0152 0266     		sub		%r2, 32			; shift = shift - 32
 292              	
 293              		; xsrl	%r4, %r2		; result2 >> shift
 294              		; 32-bit variable shift routine
 295              	L1:
 296 0154 8268     		cmp		%r2, 8			; if shift <= 8 then goto L2
 297 0156 040E     		jrle	L2
 298              	
 299 0158 8488     		srl		%r4, 8			; result >> %r2
 300 015a FD1F     		jp.d	L1
 301 015c 8264     		sub		%r2, 8			; shift = shift - 8
 302              	
 303              	L2:
 304 015e 2489     		srl		%r4, %r2		; last shift
 305              	
 306 0160 3A1F     		jp.d	finish
 307 0162 056C     		ld.w	%r5, 0			; result1 = 0
 308              	
 309              	underflow:
 310 0164 056C     		ld.w	%r5, 0			; result1 = 0
 311 0166 3D1F     		jp.d	end
 312 0168 046C     		ld.w	%r4, 0			; result2 = 0
 313              	
 314              	doshift:
 315              		; {%r5, %r4} >> shift
 316              		;xsrl	%r4, %r2		; shift low 32-bits to the right x bits (shift amount = x)
 317              		;xrr	%r5, %r2		; rotate high 32-bits to the right x bits
 318              		;xsrl	%r3, %r2		; make a mask for last 32-x bits --> %r2 = 000...111
 319              	
 320 016a F96F     		ld.w	%r9, -1			; %r2 = 0xffff ffff
 321              		; used in 64-bit variable shifting	; 	SHFTROTSHFT %r2, %r4, %r5, %r9, srl, rr, %r2
 322              		; $1 = shift amount
 323              		; $2 = 1st input register (shifted)
 324              		; $3 = 2nd input register (rotated)
 325              		; $4 = 3rd input register (mask --> shifted)
 326              		; $5 = shift instruction
 327              		; $6 = rotate instruction
 328              		; $7 = temp register
 329 016c 222E     		ld.w	%r2, %r2		; temp = shift amount
 330              	
 331              	__L0001:
 332 016e 8268     		cmp		%r2, 8		; if temp <= 8 then goto $$2
 333 0170 060E     		jrle	__L0002
 334              	
 335 0172 8488     		srl		%r4, 8		; shift 1st register
 336 0174 8598     		rr		%r5, 8		; rotate 2nd register
GAS LISTING muldf3.s 			page 7


 337 0176 8988     		srl		%r9, 8		; shift 3rd register
 338 0178 FB1F     		jp.d	__L0001
 339 017a 8264     		sub		%r2, 8		; temp = temp - 8
 340              	
 341              	__L0002:
 342 017c 2489     		srl		%r4, %r2		; last shift
 343 017e 2599     		rr		%r5, %r2		; last rotate
 344 0180 2989     		srl		%r9, %r2		; last shift
 345 0182 923E     		not		%r2, %r9		; flip mask for first x bits --> %r9 = 111...000 (mask)
 346 0184 5232     		and		%r2, %r5		; isolate first x bits of %r5
 347 0186 2436     		or		%r4, %r2		; add first x bits of %r5 to %r4
 348 0188 261F     		jp.d	finish
 349 018a 9532     		and		%r5, %r9		; keep the low 32-x bits of %r5
 350              	
 351              	lshift:					; case: shift >= 0
 352              		; {%r5, %r4, %r10} << shift
 353              		;xsll	%r5, %r2		; shift high 32-bits to the left x bits (shift amount = %r3 = x)
 354              		;xrl	%r4, %r2		; rotate mid 32-bits to the left x bits
 355              		;xsll	%r3, %r2		; make a mask for first 32-x bits --> %r3 = 111...000
 356              	
 357 018c F96F     		ld.w	%r9, -1			; %r9 = 0xffff ffff
 358              		; used in 64-bit variable shifting	; 	SHFTROTSHFT %r2, %r5, %r4, %r9, sll, rl, %r8		; %r8 = temp
 359              		; $1 = shift amount
 360              		; $2 = 1st input register (shifted)
 361              		; $3 = 2nd input register (rotated)
 362              		; $4 = 3rd input register (mask --> shifted)
 363              		; $5 = shift instruction
 364              		; $6 = rotate instruction
 365              		; $7 = temp register
 366 018e 282E     		ld.w	%r8, %r2		; temp = shift amount
 367              	
 368              	__L0003:
 369 0190 8868     		cmp		%r8, 8		; if temp <= 8 then goto $$2
 370 0192 060E     		jrle	__L0004
 371              	
 372 0194 858C     		sll		%r5, 8		; shift 1st register
 373 0196 849C     		rl		%r4, 8		; rotate 2nd register
 374 0198 898C     		sll		%r9, 8		; shift 3rd register
 375 019a FB1F     		jp.d	__L0003
 376 019c 8864     		sub		%r8, 8		; temp = temp - 8
 377              	
 378              	__L0004:
 379 019e 858D     		sll		%r5, %r8		; last shift
 380 01a0 849D     		rl		%r4, %r8		; last rotate
 381 01a2 898D     		sll		%r9, %r8		; last shift
 382 01a4 983E     		not		%r8, %r9		; flip mask for last x bits --> %r8 = 000...111 (mask)
 383 01a6 862E     		ld.w	%r6, %r8		; temp = %r8
 384 01a8 4832     		and		%r8, %r4		; isolate last x bits of %r4
 385 01aa 8536     		or		%r5, %r8		; add last x bits of %r4 to %r5
 386              		
 387 01ac 0368     		cmp		%r3, 0			; if result3 = 0 then done shifting
 388 01ae 0B19     		jreq.d	overchk
 389 01b0 9432     		and		%r4 %r9			; keep the high 32-x bits of %r4
 390              	
 391              		; case: result3 != 0
 392              		; 	MXRL	%r3, %r2		; rotate last register to the left
 393              	__L0005:
GAS LISTING muldf3.s 			page 8


 394              		
 395              	;	sub		%sp, 1
 396              	;	ld.w	[%sp+0], $2		; rs¥¹¥¿¥Ã¥¯ÂÔÈò
 397              		
 398 01b2 F271     		and		%r2,0x1f			; ºÇÂç¥í¡¼¥Æ¡¼¥È¿ô=£³£±
 399              	__L0006:
 400 01b4 8268     		cmp		%r2,0x8			; if rs <= 8
 401 01b6 040E     		jrle	__L0007				; then $$3
 402 01b8 839C     		rl		%r3,0x8			; rd << 8
 403 01ba FD1F     		jp.d	__L0006
 404 01bc 8264     		sub		%r2,0x8			; »Ä¥í¡¼¥Æ¡¼¥È²ó¿ô·×»»
 405              	__L0007:
 406 01be 239D     		rl		%r3,%r2
 407              	;	ld.w	$2, [%sp+0]		; rs¥¹¥¿¥Ã¥¯Éüµ¢
 408              	;	add		%sp, 1
 409              	
 410 01c0 6332     		and		%r3, %r6		; isolate last x bits of %r3
 411 01c2 3436     		or		%r4, %r3		; add last x bits to %r4
 412              	
 413              	overchk:
 414 01c4 1FC0F16B 		xcmp	%r1, 0x7ff
 415 01c8 060C     		jrlt	finish			; if exp < 0xff then jump to finish
 416              	
 417              	overflow:
 418 01ca FECF00C0 		xld.w	%r5, 0x7ff00000	; put infinity into result
 418      056C
 419 01d0 081F     		jp.d	end				; delayed jump
 420 01d2 046C     		ld.w	%r4, 0
 421              	
 422              	finish:
 423              		; %r0 = sign, %r1 = exponent, %r5 = mantissa
 424              	
 425 01d4 01C0FFDF 		xand	%r5, 0xfffff	; isolate mantissa
 425      F573
 426              	
 427 01da 81984198 		xrr		%r1, 12			; position exponent bits to [30:23]
 428 01de 1536     		or		%r5, %r1
 429              	
 430              	end:
 431 01e0 1098     		rr		%r0, 1			; position sign bit to MSB
 432 01e2 0536     		or		%r5, %r0		; add sign bit
 433              	
 434              		;@@@ 01/01/23 add start hinokuchi
 435              		;ld.w	%r13, [%sp+3]	; %r13Éüµ¢
 436              		;ld.w	%r12, [%sp+2]	; %r12Éüµ¢
 437              		;ld.w	%r11, [%sp+1]	; %r11Éüµ¢
 438              		;ld.w	%r10, [%sp+0]	; %r10Éüµ¢
 439              		;add		%sp, 4
 440              		;@@@ 01/01/23 add end
 441 01e4 4302     		popn	%r3				; restore register values
 442              	
 443 01e6 4006     		ret
