GAS LISTING addsf3.s 			page 1


   1              	;*********************************************
   2              	;*	Copyright (C), 1996-2001 SEIKO EPSON Corp.
   3              	;*		ALL RIGHTS RESERVED
   4              	;*
   5              	;*	filename : addsf3.s
   6              	;*
   7              	;*	Single floating point add function
   8              	;*						  subtract function					
   9              	;*		input: %r6, %r7
  10              	;*		output: %r4
  11              	;*
  12              	;*	Begin					1996/09/12	V. Chan
  13              	;*  Fixed sign bug			1997/02/17	V. Chan
  14              	;*  Fixed a precision bug	1997/02/24	V. Chan
  15              	;*  変更					2001/01/15  O.Hinokuchi
  16              	;*	gas対応		2001/10/15	watanabe
  17              	;*
  18              	;*********************************************
  19              	
  20              	.section .text
  21              	.align 1
  22              	.global __addsf3
  23              	.global __subsf3
  24              	
  25              	;==============================================
  26              	;＜レジスタ説明＞
  27              	;	%r0:符号ビット１(0(+) or 1(-))
  28              	;	%r1:指数部１(8bit)
  29              	;	%r2:符号ビット２(0(+) or 1(-))/count
  30              	;	%r3:指数部２(8bit)
  31              	;	%r4:戻り値
  32              	;	%r5:指数部オーバーフロー値(8bit)/xflag
  33              	;	%r6:引数１(float)/仮数部１/shift counter
  34              	;	%r7:引数２(float)/仮数部２
  35              	;	%r8:temp/implied bit/shift/loop counter
  36              	;	%r9:mask
  37              	;==============================================
  38              	
  39              	
  40              	;;macro	VARSHIFT $1, $2, $3
  41              		; used in 32-bit variable shifting
  42              		; $1 = input register
  43              		; $2 = shift amount
  44              		; $3 = shift instruction
  45              	
  46              	;$$1:
  47              	;	cmp		$2, 8		; if temp <= 8 then goto $$2
  48              	;	jrle	$$2
  49              	
  50              	;	$3		$1, 8		; shift input register 8 bits
  51              	;	jp.d	$$1
  52              	;	sub		$2, 8		; temp = temp - 8
  53              	
  54              	;$$2:
  55              	;	$3		$1, $2		; last shift
  56              	;;endm
  57              	
GAS LISTING addsf3.s 			page 2


  58              	__subsf3:
  59 0000 00D000C0 		xxor	%r7, 0x80000000	; 引数２(%r7)= 引数２(%r7) & 0x80000000 
  59      0778
  60              	
  61              	__addsf3:
  62 0006 0302     		pushn	%r3				; save register values
  63              	
  64 0008 03C0F56F 		xld.w	%r5, 0xff		; 指数部オーバーフロー値 <- 0xff 
  65              	
  66 000c 602E     		ld.w	%r0, %r6		; 符号ビット１(%r0) <- 引数１(%r6) 
  67 000e 109C     		rl		%r0, 1			; 符号ビット１(%r0) rotate left 1 bit
  68 0010 1070     		and		%r0, 1			; 符号ビット１(%r0) & 1 
  69 0012 082E     		ld.w	%r8, %r0		; temp(%r8) = 符号ビット１(%r0)
  70              	
  71 0014 722E     		ld.w	%r2, %r7		; 符号ビット２(%r0) <- 引数２(%r7) 
  72 0016 129C     		rl		%r2, 1			; 符号ビット２(%r2) rotate left 1 bit
  73 0018 1270     		and		%r2, 1			; 符号ビット２(%r2) & 1 
  74              	
  75 001a 612E     		ld.w	%r1, %r6		; 指数部１(%r1) <- 引数１(%r6) 
  76 001c 118C     		sll		%r1, 1			; 指数部１(%r1) << 1
  77 001e 81888188 		xsrl 	%r1, 24			; 指数部１(%r1) >> 24
  77      8188
  78              	
  79 0024 512A     		cmp		%r1, %r5		; if 指数部１(%r1) >= 指数部オーバーフロー値(%r5) 
  80 0026 00C000C0 		xjrge	overflow		; then jump to overflow
  80      920A
  81              	
  82 002c 732E     		ld.w	%r3, %r7		; 指数部２(%r3) <- 引数２(%r6)
  83 002e 138C     		sll 	%r3, 1			; 指数部２(%r3) << 1
  84 0030 83888388 		xsrl	%r3, 24			; 指数部２(%r3) >> 24
  84      8388
  85 0036 202E     		ld.w	%r0, %r2		; 符号ビット１(%r0) <- 符号ビット２(%r0) 
  86              	
  87 0038 532A     		cmp		%r3, %r5		; if 指数部２(%r3)  >= 指数部オーバーフロー値(%r5)  
  88 003a 00C000C0 		xjrge	overflow		; then jump to overflow
  88      880A
  89              			
  90 0040 312A     		cmp		%r1, %r3		; if 指数部１(%r1) < 指数部２(%r3) 
  91 0042 0A0D     		jrlt.d	ex1ltex2		; then jump to ex1ltex2
  92 0044 802E     		ld.w	%r0, %r8		; 符号ビット１(%r0) <- temp(%r8) 
  93              	
  94              		; case: exp1 >= exp2
  95 0046 182E     		ld.w	%r8, %r1		; temp(%r8) = 符号ビット１(%r0) - 指数部２(%r3) (difference)
  96 0048 3826     		sub		%r8, %r3		; temp(%r8) = temp(%r8) - 指数部２(%r3)
  97 004a 8869     		cmp		%r8, 0x18		; if temp(%r8)difference >= 0x18 (24-bits it too large)
  98 004c 642E     		ld.w	%r4, %r6		; 戻り値(%r4) <- 引数１(%r6) 
  99 004e 00C000C0 		xjrge	end				; then jump to end return first input
  99      860A
 100 0054 0A1E     		jp		continue		
 101              	
 102              	ex1ltex2:
 103              		; case: exp2 > exp1
 104 0056 382E     		ld.w 	%r8, %r3		; temp(%r8) <- 指数部２(%r3)
 105 0058 1826     		sub		%r8, %r1		; temp(%r8) = 指数部２(%r3) - 指数部１(%r1)
 106 005a 8869     		xcmp	%r8, 0x18		; if temp(%r8)difference < 0x18
 107 005c 742E     		ld.w	%r4, %r7		; 戻り値(%r4) <- 引数２ 
 108 005e 050C     		jrlt 	continue		; then jump to continue
GAS LISTING addsf3.s 			page 3


 109 0060 202E     		ld.w	%r0, %r2		; 符号ビット１(%r0) <- 符号ビット２(%r2) 
 110 0062 00C000C0 		xjp		end				; return second input
 110      7C1E
 111              	
 112              	continue:
 113 0068 0FC0FFDF 		xld.w	%r9, 0x7fffff	; mask(%r9) <- 0x7fffff 
 113      F96F
 114 006e 10C000C0 		xld.w	%r8, 0x800000	; implied bit(%r8) <- 0x800000 
 114      086C
 115              	
 116              		; isolate mantissa1
 117 0074 0168     		cmp		%r1, 0			; if 指数部１(%r1) = 0
 118 0076 0319     		jreq.d	getman2			; then jump to getman2
 119 0078 9632     		and		%r6, %r9		; 引数１(%r6) & mask(%r9)  
 120 007a 8636     		or		%r6, %r8		; 引数１(%r6) & mplied bit(%r8) 
 121              	
 122              	getman2:
 123              		; isolate mantissa2
 124 007c 0368     		cmp		%r3, 0			; if 指数部２(%r3) = 0
 125 007e 0319     		jreq.d	cmpexp			; then jump to cmpexp
 126 0080 9732     		and		%r7, %r9		; 引数２(%r7) & mask(%r9)  clear first 9 bits of %r7
 127 0082 8736     		or		%r7, %r8		; 引数２(%r7) | mplied bit(%r8) if exp2 != 0 then add implied bit (normal)
 128              	
 129              	cmpexp:
 130              		; compare exponents -- %r1 will be result exponent
 131              		; if exp1 > exp2 then mantissa2 is shifted to the right
 132              		; if exp2 > exp1 then mantissa1 is shifted to the right
 133              	
 134              		; shift mantissa left for increased precision
 135 0084 168C     		sll		%r6, 1			; 引数１(%r6) << 1
 136 0086 178C     		sll		%r7, 1			; 引数２(%r6) << 1
 137              	
 138              		; xflag indicates which input (1 or 2) is the smaller input
 139 0088 056C     		ld.w	%r5, 0			; xflag(%r5) <- 0
 140              	
 141 008a 312A     		cmp		%r1, %r3		
 142 008c 1C18     		jreq	negation		; if 指数部１(%r1) = 指数部２(%r3) then jump to negation
 143 008e 0F08     		jrgt	man2			; if 指数部１(%r1) > 指数部２(%r3) then jump to man2
 144              	
 145              		; case: exp1 < exp2
 146 0090 0168     		cmp		%r1, 0			 
 147 0092 182E     		ld.w	%r8, %r1		; temp(%r8) <- 指数部１(%r1)
 148 0094 031B     		jrne.d	shftm1			; if 指数部１(%r1) != 0 then normal
 149 0096 312E     		ld.w	%r1, %r3		; 指数部１(%r1) <- 指数部２(%r3) result exp = exp2
 150 0098 1364     		sub 	%r3, 1			; 指数部２(%r3) = 指数部２(%r3) - 1 else denormal --> decrement shift
 151              	
 152              	shftm1:
 153 009a 8326     		sub		%r3, %r8		; 指数部２(%r3) = 指数部２(%r3) - temp(%r8) shift amount = exp2 - temp (exp1)
 154              	
 155              		;xsrl		%r6, %r3	; man1 >> shift
 156              		; used in 32-bit variable shifting	; 	VARSHIFT %r6, %r3, srl	; 仮数部１(%r6) >> shift
 157              		; $1 = input register
 158              		; $2 = shift amount
 159              		; $3 = shift instruction
 160              	
 161              	__L0001:
 162 009c 8368     		cmp		%r3, 8		; if temp <= 8 then goto $$2
GAS LISTING addsf3.s 			page 4


 163 009e 040E     		jrle	__L0002
 164              	
 165 00a0 8688     		srl		%r6, 8		; shift input register 8 bits
 166 00a2 FD1F     		jp.d	__L0001
 167 00a4 8364     		sub		%r3, 8		; temp = temp - 8
 168              	
 169              	__L0002:
 170 00a6 3689     		srl		%r6, %r3		; last shift
 171 00a8 0E1F     		jp.d	negation
 172 00aa 256C     		ld.w	%r5, 2			; xflag(%r5) = 2
 173              	
 174              	man2:
 175              		; case: 指数部１ > 指数部２
 176 00ac 0368     		cmp		%r3, 0
 177 00ae 031B     		jrne.d	shftm2			; if 指数部２(%r3) != 0 then normal
 178 00b0 182E     		ld.w	%r8, %r1		; shift(%r8) <- 指数部１
 179 00b2 1864     		sub		%r8, 1			; shift(%r8) = shift(%r8) - 1 else denormal -- decrement shift
 180              	
 181              	shftm2:
 182 00b4 3826     		sub		%r8, %r3		; shift(%r8) = 指数部１(%r1) - 指数部２(%r3)
 183              	
 184              		;srl	%r7, %r8		; man2 >> shift
 185              		; used in 32-bit variable shifting	; 	VARSHIFT %r7, %r8, srl	; 仮数部１(%r7) >> shift(%r8)
 186              		; $1 = input register
 187              		; $2 = shift amount
 188              		; $3 = shift instruction
 189              	
 190              	__L0003:
 191 00b6 8868     		cmp		%r8, 8		; if temp <= 8 then goto $$2
 192 00b8 040E     		jrle	__L0004
 193              	
 194 00ba 8788     		srl		%r7, 8		; shift input register 8 bits
 195 00bc FD1F     		jp.d	__L0003
 196 00be 8864     		sub		%r8, 8		; temp = temp - 8
 197              	
 198              	__L0004:
 199 00c0 8789     		srl		%r7, %r8		; last shift
 200              	
 201 00c2 156C     		ld.w	%r5, 1			; xflag(%r5) <- 1
 202              	
 203              	negation:
 204              		; xflag = 0 if exp1 = exp2
 205              		;		  1 if exp1 > exp2
 206              		;		  2 if exp1 < exp2
 207              		; %r0 will now be result sign bit
 208              	
 209              		; if exp1 = exp2 then this is the case
 210              		; sign1	(%r0)  sign2 (%r2)	result sign (%r0)
 211              		;	0			  0				0	<== no change
 212              		;	1			  0				0	<== change to 1 if result < 0
 213              		;	0			  1				0	<== change to 1 if result < 0
 214              		;	1			  1				1	<== no change
 215              	
 216 00c4 202A     		cmp		%r0, %r2		; if 符号ビット１(%r0) = 符号ビット２(%r2) compare sign bits
 217 00c6 0B18     		jreq	sign			; then jump to sign
 218 00c8 1068     		cmp		%r0, 1			; if 符号ビット１(%r0) != 1
 219 00ca 071A     		jrne	negm2			; then jump to negm2
GAS LISTING addsf3.s 			page 5


 220              	
 221              		; case: sign1 = 1
 222 00cc 0568     		cmp		%r5, 0			; if xflag(%r5) != 0 only change %r0 if xflag = 0
 223 00ce 021A     		jrne	negm1			; then jump to negm1
 224 00d0 006C     		ld.w	%r0, 0			; 符号ビット１(%r0) <- 0 %r0 is now temp result sign (positive)
 225              	
 226              	negm1:
 227 00d2 663E     		not		%r6, %r6		; 引数１(%r6) = ~引数１(%r6) negate man1
 228 00d4 041F     		jp.d	sign			; delayed jump to sign
 229 00d6 1660     		add		%r6, 1			; 仮数部１(%r6) = 仮数部１(%r6) + 1
 230              		
 231              	negm2:
 232 00d8 773E     		not		%r7, %r7		; 仮数部２(%r7) = ~仮数部２(%r7) negate man2
 233 00da 1760     		add		%r7, 1			; 仮数部２(%r7) = 仮数部２(%r7) + 1
 234              	
 235              	sign:
 236              		; fix sign, case where exp2 > exp1 and sign2 = 1
 237              		; if xflag = 2 then result sign = sign2 (%r0 = %r2)
 238              		; if xflag = 1 then result sign = sign1	(%r0 = %r0)
 239              		; if xflag = 0 then result sign = 0 or 1
 240 00dc 2568     		cmp		%r5, 2			; if xflag(%r5) != 2
 241 00de 021A     		jrne	addition		; then jump to addition begin addition
 242              	
 243              		; case: xflag = 2
 244 00e0 202E     		ld.w	%r0, %r2		; 符号ビット１(%r0) <- 符号ビット２(%r2) result sign = sign2
 245              	
 246              	addition:
 247              		; %r0 = result sign, %r1 = result exponent
 248              		; %r6 = mantissa1, %r7 = mantissa2
 249              		; %r4 = result
 250              	
 251 00e2 7622     		add		%r6, %r7		; 仮数部１= 仮数部１+ 仮数部２ add man1 and man2
 252 00e4 642E     		ld.w 	%r4, %r6		; 戻り値(%r4) <- 仮数部１+ 仮数部２ put result (%r6) in %r4
 253              	
 254 00e6 0468     		cmp		%r4, 0			; if 戻り値(%r4) = 0
 255 00e8 3B19     		jreq.d	end				; jump to end if result = 0
 256 00ea 086C     		ld.w 	%r8, 0			; loop counter(8) <- 0 clear temp register
 257 00ec 0608     		jrgt	precount		; if result > 0 then continue with normalize
 258              	
 259              		; case: result < 0
 260 00ee 443E     		not		%r4, %r4		; 戻り値(%r4) = ~戻り値(%r4) + 1
 261 00f0 1460     		add		%r4, 1
 262              	
 263 00f2 0568     		cmp		%r5, 0			; if xflag(%r5) != 0 
 264 00f4 021A     		jrne	precount		; then goto count
 265 00f6 106C     		ld.w 	%r0, 1			; 符号ビット１(%r0) <- 1 sign was 0 now sign = 1 
 266              	
 267              	precount:
 268 00f8 1488     		srl		%r4, 1			; 戻り値(%r4) >> 1 compensate for shifts on 117, 118
 269 00fa 462E     		ld.w	%r6, %r4		; shift counter(%r6) <- (戻り値(%r4) >> 1) copy new result to %r6 for counting
 270              	
 271              	count:
 272 00fc 628E     		scan1	%r2, %r6		; scan1 count(%r2), shift counter(%r6) count = ; of 0's before leading 1 in result
 273 00fe 0412     		jruge	expchk			; if count !=8 then goto expchk
 274 0100 8860     		add		%r8, 8			; loop counter(%r8) = loop counter (%r8) + 8 add 8 to loop counter
 275 0102 FD1F     		jp.d	count
 276 0104 868C     		sll		%r6, 8			; shift counter(%r6) >> 8 shift 8 leading 0's out of %r6
GAS LISTING addsf3.s 			page 6


 277              	
 278              	expchk:
 279 0106 8222     		add		%r2, %r8		; count(%r2) = count(%r2) + loop counter(%r8)
 280              	
 281 0108 0168     		cmp		%r1, 0			; if 指数部１(%r1) != 0 
 282 010a 051A     		jrne	normalize		; then jump to normalize
 283              	
 284              		; case: denormal + denormal (sisu = 0)
 285 010c 8268     		cmp		%r2, 8			; if count(%r2) != 8 
 286 010e 241A     		jrne	finish			; then jump to finish
 287 0110 231F     		jp.d	finish
 288 0112 116C     		ld.w 	%r1, 1			; 指数部１(%r1) <- 1 if count = 8 then normal result
 289              	
 290              	normalize:
 291 0114 8264     		sub		%r2, 8			; count(%r2) = count(%r2) - 8
 292 0116 2018     		jreq	finish			; if count(%r2) = 8 then no normalize needed
 293 0118 150C     		jrlt	shftrght		; if count(%r2) <= 8 then normal result with carry-over
 294              	
 295              		; case: count > 8
 296 011a 212A     		cmp		%r1, %r2		; if 指数部１(%r1) <= count(%r2) 
 297 011c 0A0E     		jrle	denormal		; then denormal
 298              	
 299 011e 282E     		ld.w	%r8, %r2		; temp(%r8) <- count(%r2)
 300              		; used in 32-bit variable shifting	; 	VARSHIFT  %r4, %r2, sll	; 戻り値(%r4) << count(%r2)
 301              		; $1 = input register
 302              		; $2 = shift amount
 303              		; $3 = shift instruction
 304              	
 305              	__L0005:
 306 0120 8268     		cmp		%r2, 8		; if temp <= 8 then goto $$2
 307 0122 040E     		jrle	__L0006
 308              	
 309 0124 848C     		sll		%r4, 8		; shift input register 8 bits
 310 0126 FD1F     		jp.d	__L0005
 311 0128 8264     		sub		%r2, 8		; temp = temp - 8
 312              	
 313              	__L0006:
 314 012a 248D     		sll		%r4, %r2		; last shift
 315              		;xsll	%r4, %r2		; result << count
 316              	
 317 012c 151F     		jp.d	finish
 318 012e 8126     		sub		%r1, %r8		; 指数部１(%r1) = 指数部１(%r1) - count(%r2)
 319              	
 320              	denormal:
 321 0130 1164     		sub 	%r1, 1			; 指数部１(%r1) = 指数部１(%r1) - 1 (shift to denormal position)
 322              		; used in 32-bit variable shifting	; 	VARSHIFT %r4, %r1, sll	; 戻り値(%r4) << 指数部１(%r1)
 323              		; $1 = input register
 324              		; $2 = shift amount
 325              		; $3 = shift instruction
 326              	
 327              	__L0007:
 328 0132 8168     		cmp		%r1, 8		; if temp <= 8 then goto $$2
 329 0134 040E     		jrle	__L0008
 330              	
 331 0136 848C     		sll		%r4, 8		; shift input register 8 bits
 332 0138 FD1F     		jp.d	__L0007
 333 013a 8164     		sub		%r1, 8		; temp = temp - 8
GAS LISTING addsf3.s 			page 7


 334              	
 335              	__L0008:
 336 013c 148D     		sll		%r4, %r1		; last shift
 337              		;xsll 	%r4, %r1		; result << exp
 338 013e 0C1F     		jp.d	finish
 339 0140 016C     		ld.w	%r1, 0			; 指数部１(%r1) <- 0 (denormal result)
 340              	
 341              	shftrght:
 342 0142 1488     		srl		%r4, 1			; 戻り値(%r4) >> 1
 343 0144 1160     		add		%r1, 1			; 指数部１(%r1) = 指数部１(%r1) + 1
 344              	
 345              		; overflow check
 346 0146 03C0F56F 		xld.w	%r5, 0xff		; 指数部オーバーフロー値(%r5) <- 0xff add:01/01/19 Hinokuchi set overflow compari
 347 014a 512A     		cmp		%r1, %r5		; if 指数部１(%r1)  < 0xff
 348 014c 050C     		jrlt	finish			; then jump to finish
 349              	
 350              	overflow:
 351 014e F0CF00C0 		xld.w	%r4, 0x7f800000	; 戻り値(%r4) <- 0x7f800000 put infinity into result
 351      046C
 352 0154 051E     		jp		end
 353              	
 354              	finish:
 355              		; %r0 = sign, %r1 = exponent, %r4 = mantissa
 356              	
 357 0156 9432     		and		%r4, %r9		; 戻り値(%r4) = 戻り値(%r4) & mask(%r9) isolate mantissa
 358              	
 359 0158 81981198 		xrr		%r1, 9			; 指数部１(%r1) bit[30〜23]にシフト  position exponent bits to [30:23]
 360 015c 1436     		or		%r4, %r1		; 戻り値(%r4) = 指数部１(%r1) | 仮数部(%r4)
 361              	
 362              	end:
 363 015e 1098     		rr		%r0, 1			; 符号ビット１(%r0)bit[31]にシフト position sign bit to MSB
 364 0160 0436     		or		%r4, %r0		; 戻り値(%r4) = 符号ビット１(%r0) | 指数部１(%r1) | 仮数部(%r4) add sign bit
 365              	
 366 0162 4302     		popn	%r3				; restore register values
 367              	
 368 0164 4006     		ret
