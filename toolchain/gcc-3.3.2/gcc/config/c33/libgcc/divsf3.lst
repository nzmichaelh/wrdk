GAS LISTING divsf3.s 			page 1


   1              	;*********************************************
   2              	;*	Copyright (C), 1996-2001 SEIKO EPSON Corp.
   3              	;*		ALL RIGHTS RESERVED
   4              	;*
   5              	;*	filename : divsf3.s
   6              	;*
   7              	;*	Single floating point division function
   8              	;*		input: %r6, %r7
   9              	;*		output: %r4
  10              	;*
  11              	;*	Begin		1996/09/12	V. Chan
  12              	;*  変更		2001/01/18  O.Hinokuchi
  13              	;*	gas対応		2001/10/15	watanabe
  14              	;*
  15              	;*****************************************
  16              	
  17              	.section .text
  18              	.align 1
  19              	.global __divsf3
  20              	
  21              	;==============================================
  22              	;＜レジスタ説明＞
  23              	;	%r0:符号ビット１(0(+) or 1(-))
  24              	;	%r1:指数部１(8bit)
  25              	;	%r2:符号ビット２(0(+) or 1(-))/shift/flag
  26              	;	%r3:指数部２(8bit)/count
  27              	;	%r4:戻り値(float)
  28              	;	%r5:temp
  29              	;	%r6:引数１(被除数)
  30              	;	%r7:引数２(除数)
  31              	;	%r8:mask
  32              	;	%r9:overflow value
  33              	;	%r10:implied bit/lshift
  34              	;	%r11:count1/shift
  35              	;	%r12:temp/count2
  36              	;	%r13:loop counter/temp/shift
  37              	;==============================================
  38              	
  39              	
  40              	;;macro	VARSHIFT $1, $2, $3
  41              		; used in 32-bit variable shifting
  42              		; $1 = input register
  43              		; $2 = shift amount
  44              		; $3 = shift instruction
  45              	;$$1:
  46              	;	cmp		$2, 8		; if temp <= 8 then goto $$2
  47              	;	jrle	$$2
  48              	
  49              	;	$3		$1, 8		; shift input register 8 bits
  50              	;	jp.d	$$1
  51              	;	sub		$2, 8		; temp = temp - 8
  52              	
  53              	;$$2:
  54              	;	$3		$1, $2		; last shift
  55              	;;endm
  56              	
  57              	__divsf3:
GAS LISTING divsf3.s 			page 2


  58 0000 0302     		pushn	%r3				; save register values
  59              		;@@@ 01/01/30 add start hinokuchi
  60              		;sub		%sp, 4
  61              		;ld.w	[%sp+0], %r10	; %r10待避
  62              		;ld.w	[%sp+1], %r11	; %r11待避
  63              		;ld.w	[%sp+2], %r12	; %r12待避
  64              		;ld.w	[%sp+3], %r13	; %r13待避
  65              		;@@@ 01/01/30 add end
  66              	
  67              		;@@@ 01/02/15 del xld.w	%r9, 0xff		; set overflow comparison value
  68              	
  69 0002 602E     		ld.w	%r0, %r6		; 符号ビット１(%r0) <- 引数１(%r6) 
  70 0004 109C     		rl		%r0, 1			; 符号ビット１(%r0) rotate left 1 bit
  71 0006 1070     		and		%r0, 1			; 符号ビット１(%r0) & 1 
  72              	
  73 0008 722E     		ld.w	%r2, %r7		; 符号ビット２(%r2) <- 引数２(%r7)
  74 000a 129C     		rl		%r2, 1			; 符号ビット２(%r2) rotate left 1 bit
  75 000c 1270     		and		%r2, 1			; 符号ビット２(%r2) & 1
  76              	
  77 000e 203A     		xor		%r0, %r2		; 符号ビット１(%r0) = ~符号ビット１(%r0)
  78 0010 046C     		ld.w	%r4, 0			; 戻り値(%r4) <- 0
  79              	
  80 0012 168C     		sll		%r6, 1			; 引数１(%r6) << 1  clear MSB
  81 0014 1688     		srl		%r6, 1 			; 引数１(%r6) >> 1
  82 0016 0668     		cmp		%r6, 0
  83 0018 00C0     		ext		end@rm
  84 001a 9A18     		jreq	end@rl			; if 引数１(%r6) = 0 then end
  85              	
  86 001c 0768     		cmp		%r7, 0
  87 001e 178C     		sll		%r7, 1			; 引数２(%r7) << 1 clear
  88 0020 1788     		srl		%r7, 1			; 引数２(%r7) >> 1
  89 0022 00C0     		ext		overflow@rm
  90 0024 8B18     		jreq	overflow@rl		; if 引数２(%r7) = 0 then overflow
  91              	
  92 0026 612E     		ld.w	%r1, %r6		; 指数部１(%r1) <- 引数１(%r6)
  93 0028 81888188 		xsrl 	%r1, 23			; 指数部１(%r1) >> 23
  93      7188
  94              	
  95              		;@@@ 01/02/15 del cmp		%r1, %r9		; if 指数部１(%r1) >= overflow value
  96 002e 03C0F16B 		xcmp	%r1, 0xff		; if 指数部１(%r1) >= overflow value
  97 0032 00C0     		ext		overflow@rm
  98 0034 830A     		jrge	overflow@rl		; result is overflow
  99              	
 100 0036 732E     		ld.w	%r3, %r7		; 指数部２(%r3) <- 引数２(%r7)
 101 0038 83888388 		xsrl	%r3, 23			; 指数部２(%r3) >> 23
 101      7388
 102              	
 103              		;@@@ 01/02/15 del cmp		%r3, %r9		; if 指数部２(%r3) >= overflow value
 104 003e 03C0F36B 		xcmp		%r3, 0xff	; if 指数部２(%r3) >= overflow value
 105              	
 106 0042 00C0     		ext		end@rm
 107 0044 8518     		jreq	end@rl			; result is 0 (xxx/NaN = 0)
 108              	
 109              		;@@@ 01/02/15 del xld.w	%r8, 0x7fffff	; mask(%r8) <- 0x7fffff  set mask for isolating mantissa
 110              		;@@@ 01/02/15 del xld.w	%r10, 0x800000	; implied bit(%r10)
 111 0046 0FC0FFDF 		xld.w	%r5, 0x7fffff	; mask(%r8) <- 0x7fffff @@@ 01/02/16 add
 111      F56F
GAS LISTING divsf3.s 			page 3


 112 004c 126C     		ld.w	%r2, 1			; flag(%r2) = 1
 113              		;@@@ 01/02/15 del ld.w	%r13, 0			; loop counter(%r13)  <- 0
 114 004e 086C     		ld.w	%r8, 0			; loop counter(%r8)  <- 0
 115              	
 116              		; isolate mantissa1
 117              		;and		%r6, %r8	; line 62
 118 0050 0168     		cmp		%r1, 0			; 
 119 0052 0819     		jreq.d	count1			; if 指数部１(%r1) = 0 (denormal)
 120              		;@@@ 01/02/15 del and		%r6, %r8		; 引数１(%r6) = 引数１(%r6) & mask(%r8)  clear first 9 bits of %r
 121 0054 5632     		and		%r6, %r5 		; 引数１(%r6) = 引数１(%r6) & 0x7fffff  clear first 9 bits of %r6
 122              	
 123              		; case: normal input
 124              		;@@@ 01/02/15 del or		%r6, %r10		; 引数１(%r6) = 引数１(%r6) & implied bit(%r10)   else add implie
 125 0056 10C000C0 		xoor	%r6, 0x800000	; 引数１(%r6) = 引数１(%r6) & implied bit(0x800000)   else add implied bit to m
 125      0674
 126 005c 026C     		ld.w	%r2, 0			; flag(%r2) <- 0
 127 005e 081F     		jp.d	getman2
 128              		;@@@ 01/02/15 del ld.w	%r11, 8			; count1(%r11) <- 8
 129 0060 896C     		ld.w	%r9, 8			; count1(%r9) <- 8
 130              		
 131              	count1:	
 132              		;@@@ 01/02/15 del ld.w	%r12, %r6		; temp(%r12) <- 引数１(%r6)
 133 0062 642E     		ld.w	%r4, %r6		; temp(%r4) <- 引数１(%r6)
 134              	
 135              	loop1:
 136              		;@@@ 01/02/15 del scan1	%r11, %r12		; %r11 = count1
 137 0064 498E     		scan1	%r9, %r4		; %r9 = count1
 138 0066 0412     		jruge	getman2			; if count1 !=8 then goto getman2
 139              		;@@@ 01/02/15 del add		%r13, 8			; loop counter(%r13) = loop counter(%r13) + 8
 140 0068 8860     		add		%r8, 8			; loop counter(%r8) = loop counter(%r8) + 8
 141 006a FD1F     		jp.d	loop1
 142              		;@@@ 01/02/15 del sll		%r12, 8			; temp(%r12) << 8  shift register to the left 8 bits
 143 006c 848C     		sll		%r4, 8			; temp(%r4) << 8  shift register to the left 8 bits
 144              			
 145              	getman2:
 146              		;@@@ 01/02/15 del add		%r11, %r13		; count1(%r11) = count1(%r11) + loop counter(%r13)
 147 006e 8922     		add		%r9, %r8		; count1(%r9) = count1(%r8) + loop counter(%r13)
 148              		;@@@ 01/02/15 del ld.w	%r13, 0			; loop counter(%r13) = 0
 149 0070 086C     		ld.w	%r8, 0			; loop counter(%r8) = 0
 150              	
 151              		; isolate mantissa2
 152              		;and	%r7, %r8		; line 85
 153 0072 0368     		cmp		%r3, 0
 154 0074 0719     		jreq.d	count2			; if 指数部２(%r3) = 0 then jump to count2
 155              		;@@@ 01/02/15 del and		%r7, %r8		; 引数２(%r7) = 引数２(%r7) & mask(%r8) clear first 9 bits of %r7
 156 0076 5732     		and		%r7, %r5		; 引数２(%r7) = 引数２(%r7) & mask(0x7fffff) clear first 9 bits of %r7
 157              		;@@@ 01/02/15 del or		%r7, %r10		; 引数２(%r7) = 引数２(%r7) | implied bit(%r10)  else add implied
 158 0078 10C000C0 		xoor	%r7, 0x800000	; 引数２(%r7) = 引数２(%r7) | implied bit(0x800000)  else add implied bit
 158      0774
 159 007e 091F     		jp.d	cmpcount
 160              		;@@@ 01/02/15 del ld.w	%r12, 8			; count2(%r12) <- 8
 161 0080 846C     		ld.w	%r4, 8			; count2(%r12) <- 8
 162              	
 163              	count2:
 164 0082 752E     		ld.w	%r5, %r7		; temp(%r5) <- 仮数２(%r7) man2
 165 0084 1264     		sub		%r2, 1			; flag(%r2) = flag(%r2) - 1 (0 or -1)
 166              	
GAS LISTING divsf3.s 			page 4


 167              	loop2:
 168              		;@@@ 01/02/15 del scan1	%r12, %r5		; %r12 = count2
 169 0086 548E     		scan1	%r4, %r5		; %r4 = count2
 170              	
 171 0088 0412     		jruge	cmpcount		; if count2 !=8 then goto cmpcount
 172 008a 8860     		add		%r8, 8			; loop counter(%r8) = loop counter(%r8) + 8
 173 008c FD1F     		jp.d	loop2
 174 008e 858C     		sll		%r5, 8			; temp(%r5) << 8 shift register to the left 8 bits	
 175              	
 176              	cmpcount:
 177 0090 8422     		add		%r4, %r8		; count2(%r4) = count2(%r4) + loop counter(%r8)
 178              	
 179 0092 492A     		cmp		%r9, %r4		; if count1(%r9) <= count2(%r4) then goto man2 shift
 180 0094 0D0E     		jrle	man2shift
 181              	
 182              		; case: count1 > count2
 183 0096 4926     		sub		%r9, %r4		; shift(%r9) = count1(%r9) - count2(%r4)
 184 0098 1964     		sub		%r9, 1			; shift(%r9) = shift(%r9) - 1
 185              	
 186              		;xsll	%r6, %r11		; shift man1
 187 009a 982E     		ld.w	%r8, %r9		; temp(%r8) <- shift(%r9)
 188              		; used in 32-bit variable shifting	; 	VARSHIFT %r6, %r9, sll
 189              		; $1 = input register
 190              		; $2 = shift amount
 191              		; $3 = shift instruction
 192              	__L0001:
 193 009c 8968     		cmp		%r9, 8		; if temp <= 8 then goto $$2
 194 009e 040E     		jrle	__L0002
 195              	
 196 00a0 868C     		sll		%r6, 8		; shift input register 8 bits
 197 00a2 FD1F     		jp.d	__L0001
 198 00a4 8964     		sub		%r9, 8		; temp = temp - 8
 199              	
 200              	__L0002:
 201 00a6 968D     		sll		%r6, %r9		; last shift
 202              	
 203 00a8 1860     		add		%r8, 1			; shift(%r8) = shift(%r8) + 1
 204 00aa 0D1F     		jp.d	divide
 205 00ac 852E     		ld.w	%r5, %r8		; lshift(%r5) <- shift(%r8)
 206              	
 207              	man2shift:
 208 00ae 9426     		sub		%r4, %r9		; shift(%r4) = count2(%r4) - count1(%r9)
 209 00b0 1460     		add		%r4, 1			; shift(%r4) = shift(%r4) + 1
 210              	
 211              		;xsll	%r7, %r12		; shift man2 to the left
 212 00b2 482E     		ld.w	%r8, %r4		; temp(%r8) = shift(%r4)
 213              		; used in 32-bit variable shifting	; 	VARSHIFT %r7, %r4, sll
 214              		; $1 = input register
 215              		; $2 = shift amount
 216              		; $3 = shift instruction
 217              	__L0003:
 218 00b4 8468     		cmp		%r4, 8		; if temp <= 8 then goto $$2
 219 00b6 040E     		jrle	__L0004
 220              	
 221 00b8 878C     		sll		%r7, 8		; shift input register 8 bits
 222 00ba FD1F     		jp.d	__L0003
 223 00bc 8464     		sub		%r4, 8		; temp = temp - 8
GAS LISTING divsf3.s 			page 5


 224              	
 225              	__L0004:
 226 00be 478D     		sll		%r7, %r4		; last shift
 227              	
 228 00c0 853E     		not		%r5, %r8		; lshift(%r5) = ~temp(%r8)
 229 00c2 2560     		add		%r5, 2			; lshift(%r5) = lshift(%r5) + 2
 230              	
 231              	divide:
 232              		; man1 has 8 leading 0's
 233              		; man2 has 0 leading 0's
 234              		; lshift used to normalize result
 235              		
 236 00c4 3126     		sub		%r1, %r3		; 指数部１(%r1) = 指数部１(%r1) - 指数部２(%r3)  new sisu = sisu1 - sisu2 + bias + 
 237              	
 238 00c6 01C0F163 		xadd	%r1, 0x7f		; 指数部１(%r1) = 指数部１(%r1) + 0x7f
 239              	
 240 00ca 2122     		add		%r1, %r2		; 指数部１(%r1) = 指数部１(%r1) + flag(%r2)
 241              	
 242 00cc 03C0F16B 		xcmp	%r1, 0xff		; if 指数部１(%r1) >= 0xff then goto overflow
 243 00d0 350A     		jrge	overflow
 244 00d2 916A     		xcmp	%r1, -23		; if 指数部１(%r1) <= -23 then underflow
 245 00d4 3D0F     		jrle.d	end
 246 00d6 046C     		ld.w	%r4, 0			; 戻り値 <- 0
 247              	
 248 00d8 42A0     		ld.w	%alr, %r4		; extra 32-bits for accuracy
 249 00da 708F     		div0u	%r7
 250 00dc 63A0     		ld.w	%ahr, %r6		; dividend
 251              		
 252              	;;ifdef FAST
 253              	;	div1	%r7			; 25 division instructions
 254              	;	div1	%r7
 255              	;	div1	%r7
 256              	;	div1	%r7
 257              	;	div1	%r7
 258              	;	div1	%r7
 259              	;	div1	%r7
 260              	;	div1	%r7
 261              	;	div1	%r7
 262              	;	div1	%r7
 263              	;	div1	%r7
 264              	;	div1	%r7
 265              	;	div1	%r7
 266              	;	div1	%r7
 267              	;	div1	%r7
 268              	;	div1	%r7
 269              	;	div1	%r7
 270              	;	div1	%r7
 271              	;	div1	%r7
 272              	;	div1	%r7
 273              	;	div1	%r7
 274              	;	div1	%r7
 275              	;	div1	%r7
 276              	;	div1	%r7
 277              	;	div1	%r7
 278              	;
 279              	;;else
 280              	
GAS LISTING divsf3.s 			page 6


 281 00de 386C     		ld.w	%r8, 3		; loop counter(%r8) <- 3
 282 00e0 7093     		div1	%r7			; first division step (25 in total)
 283              	
 284              	divloop:
 285 00e2 7093     		div1	%r7			; 8 division steps
 286 00e4 7093     		div1	%r7
 287 00e6 7093     		div1	%r7
 288 00e8 7093     		div1	%r7
 289 00ea 7093     		div1	%r7
 290 00ec 7093     		div1	%r7
 291 00ee 7093     		div1	%r7
 292 00f0 7093     		div1	%r7
 293              	
 294 00f2 1864     		sub		%r8, 1			; loop counter(%r8) = loop counter(%r8) - 1
 295 00f4 F71A     		jrne	divloop			; exit when zero flag is set
 296              	
 297              	;;endif
 298              	
 299 00f6 24A4     		ld.w	%r4, %alr		; 戻り値(%r4) <- 商(%alr)
 300              	
 301              		; normalize
 302              		; %r0 = result sign, %r1 = result exponent
 303              		; %r10 = lshift, %r4 = result
 304              	
 305              		;ld.w	%r3, 7			; count = 7
 306 00f8 036C     		ld.w	%r3, 0			; count(%r3) <- 0
 307 00fa 482E     		ld.w	%r8, %r4
 308 00fc 20C000C0 		xand	%r8, 0x1000000	; check 24th bit
 308      0870
 309              	
 310 0102 021A     		jrne	continue2		; if 24th bit = 1 then count = 7
 311 0104 1360     		add		%r3, 1			; else count(%r3) = count(%r3) + 1
 312              	
 313              	continue2:
 314              		;sub		%r3, 7		; count = count - 7
 315 0106 3522     		add		%r5, %r3		; lshift(%r5) = lshift(%r5) + count(%r3)
 316 0108 512A     		cmp		%r1, %r5
 317 010a 1108     		jrgt	normal			; if 指数部１(%r1) > lshift(%r5) then normal result
 318              	
 319              		; case: exp <= lshift
 320 010c 1560     		add		%r5, 1
 321 010e 3526     		sub		%r5, %r3		; lshift(%r5) = lshift(%r5) + (8 - (count(%r3)+7) )
 322 0110 1526     		sub		%r5, %r1
 323 0112 1560     		add		%r5, 1			; lshift(%r5) = lshift(%r5) - (指数部１(%r1) - 1)
 324              	
 325 0114 9569     		cmp		%r5, 25		; if lshift(%r5) amount >= 25 then underflow
 326 0116 030C     		jrlt	notunder
 327 0118 1B1F     		jp.d	end
 328 011a 046C     		ld.w	%r4, 0			; 戻り値(%r4) <- 0
 329              	
 330              	notunder:
 331              		;xsrl	%r4, %r10		; %r4 >> lshift (shift amount)
 332              		; used in 32-bit variable shifting	; 	VARSHIFT %r4, %r5, srl
 333              		; $1 = input register
 334              		; $2 = shift amount
 335              		; $3 = shift instruction
 336              	__L0005:
GAS LISTING divsf3.s 			page 7


 337 011c 8568     		cmp		%r5, 8		; if temp <= 8 then goto $$2
 338 011e 040E     		jrle	__L0006
 339              	
 340 0120 8488     		srl		%r4, 8		; shift input register 8 bits
 341 0122 FD1F     		jp.d	__L0005
 342 0124 8564     		sub		%r5, 8		; temp = temp - 8
 343              	
 344              	__L0006:
 345 0126 5489     		srl		%r4, %r5		; last shift
 346 0128 0D1F     		jp.d	finish
 347 012a 016C     		ld.w	%r1, 0			; 指数部１(%r1) <- 0 for denormal result
 348              	
 349              	normal:	
 350              		; case: exp > lshift
 351 012c 126C     		ld.w	%r2, 1			; shift(%r2) <- 1
 352 012e 3226     		sub		%r2, %r3		; shift(%r2) = shift(%r2) - count(%r3)
 353              	
 354 0130 2489     		srl		%r4, %r2		; 戻り値(%r4) >> shift(%r2) <-- [1 or 0]
 355 0132 5126     		sub		%r1, %r5		; 指数部１(%r1) = 指数部１(%r1) - lshift(%r5)
 356              		
 357 0134 03C0F16B 		xcmp	%r1, 0xff		; if 指数部１(%r1) < 0xff then jump to finish
 358 0138 050C     		jrlt	finish
 359              	
 360              	overflow:
 361 013a F0CF00C0 		xld.w	%r4, 0x7f800000	; put infinity into result
 361      046C
 362 0140 071E     		jp		end
 363              	
 364              	finish:
 365              		; %r0 = sign, %r1 = exponent, %r4 = mantissa
 366 0142 0FC0FFDF 		xand	%r4, 0x7fffff	; isolate mantissa
 366      F473
 367              	
 368 0148 81981198 		xrr		%r1, 9			; position exponent bits to [30:23]
 369 014c 1436     		or		%r4, %r1
 370              	
 371              	end:
 372 014e 1098     		rr		%r0, 1			; position sign bit to MSB
 373 0150 0436     		or		%r4, %r0		; 戻り値(%r4) =  戻り値(%r4) | 符号ビット１(%r0)t
 374              	
 375              		;@@@ 01/01/23 add start hinokuchi
 376              		;ld.w	%r13, [%sp+3]	; %r13復帰
 377              		;ld.w	%r12, [%sp+2]	; %r12復帰
 378              		;ld.w	%r11, [%sp+1]	; %r11復帰
 379              		;ld.w	%r10, [%sp+0]	; %r10復帰
 380              		;add		%sp, 4
 381              		;@@@ 01/01/23 add end
 382 0152 4302     		popn	%r3				; restore register values
 383              	
 384 0154 4006     		ret
